# -*- coding: utf-8 -*-
"""Lista 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eazdKdmFFGnvnNGvnhx2FopUHNmvX0pV

Faça um programa que imprima os n primeiros números primos, onde n é informado pelo usuário.
"""

def primo(numero):
  for i in range(2,numero):
    if numero % i == 0:
      return False
  return True
n = int(input('Digite quantos números primos você quer: '))

i = 1
cont = 0
while cont < n:
  if primo(i) == True:
    cont +=1
    print(i,end=' ')
  i +=1

"""Questão 1"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
def teste(pares,impares):
  for i in range(tam):
    usuario = int(input('Digite um número: '))
    if usuario % 2 == 0:
      pares.append(usuario)
    else:
      impares.append(usuario)


tam = int(input('Digite quantos números irá colocar: '))
pares = []
impares = []
teste(pares,impares)
print(pares,'são pares.')
print(impares,'são ímpares.')

"""Questão 2"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f 
cont = 0
contquestoes = 0
gabarito = []
respostas = []
booleanos = []
tam = int(input('Digite quantas questões tem a prova: ')) 
print()
print('ALUNO')
for i in range(tam):
  print('Questão',[i+1])
  usuario = input('')
  respostas.append(usuario)
  contquestoes+=1
print()
print('PROFESSOR')
for i in range(tam):
  print('Questão',[i+1])
  professor = input('')
  gabarito.append(professor)
def boole():
  for i in range(tam):
    if respostas[i] == gabarito[i]:
      booleano = True
      booleanos.append(booleano)
    else:
      booleano = False
      booleanos.append(booleano)
  return booleanos
boole()
for i in range(tam):
  if booleanos[i]:
    cont+=1
def porcentagem(): 
  acertos = (cont*100)/contquestoes
  return acertos 

print('O percentual de acertos foi de:',porcentagem(),'%')

"""Questão 3"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
def vetor():#fica só alocado na memória
  tam = int(input('Digite o tamanho do vetor: '))
  lista = []

  for i in range(tam):
    vetores = int(input('Digite um número: '))
    lista.append(vetores)
    lista.reverse()
  return lista
    


print('Números em ordem crescente:',vetor())

"""Questão 4"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
def teste(tam):  
  vetor = []
  booleano = []
  tam = int(input('Digite o tamanho:'))
  print()
  verificacao = False
  for i in range(tam):
    usuario = int(input('Digite um número:'))
    vetor.append(usuario)
  for i in range(tam):
    for j in range(tam):
      if usuario > vetor[j]:
        verificacao = True
    return verificacao 
tam = 0 
if teste(tam): #chama o resultado de teste
  print('Os números estão em ordem crescente')
else:
  print('Os números não estão em ordem crescente')

"""Questão 6"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
tam = int(input('Digite o tamanho do vetor: '))
vetor1 = []
vetor2 = []
vetor3 = []
def imprimir(vetor3): 
  for i in range(tam):
    usuario1 = int(input('Digite um número:'))
    vetor1.append(usuario1)
  for i in range(tam):
    usuario2 = int(input('Digite um número:'))
    vetor2.append(usuario2)
  for i in range(tam):
    vetor3.append(vetor1[i])
  for i in range(tam):
    vetor3.append(vetor2[i])
  return vetor3
print(imprimir(vetor3))